#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Report
\end_layout

\begin_layout Author
Nicol√≤ Pinciroli
\end_layout

\begin_layout Subsection*
Introduction
\end_layout

\begin_layout Standard
This project consisted in modeling a city by creating a city simulator.
 The goal of such a simulator should be the support of the decision-making
 process in urban development related tasks.
\end_layout

\begin_layout Standard
Since no data have been provided, the city has been generated by scratch,
 and some randomness has been introduced in order to create a slightly different
 setting every time the simulator is run.
\end_layout

\begin_layout Standard
The proposed web application is based on the WebGL technology and on the
 use of JavaScript, CSS and HTML.
 It hasn't been necessary to use a server for this purpose, since all the
 results can be computed on the user machine.
 This approach presents some advantages (for instance, there is no need
 to have a server to run the simulator) and some disadvantages (since the
 computation is performed by the user machine, performance strongly depend
 on the user machine and the simulation can take some seconds before something
 can be visualized).
\end_layout

\begin_layout Subsection*
Tools and libraries
\end_layout

\begin_layout Standard
It is possible to use pure WebGL, without any additional library, to build
 the simulator.
 This approach certainly allows to go in depth in the structure of WebGL
 and to understand thoroughly the mathematical foundations of computer graphics,
 but it also presents some disadvantages.
 Firstly, creating tridimensional objects in WebGL requires to model them
 starting by creating points and triangles.
 Then, in order to create several objects with similar features, it can
 be a good idea to create a library containing some commonly-used functions.
 In this case, an example can be a function to create a cube, or a pyramid.
 The implementation of such libraries can require a huge amount of time,
 especially considering that the topics related to tridimensional modeling
 in WebGL will be covered after the submission deadline.
 There exist several libraries that allow to handle tridimensional scenes
 in WebGL with ease.
 Such libraries have been developed during several years by many developers,
 and I expect them to rely on well-established good practices and on an
 optimized code.
 Building such libraries in one month would probably not lead to the same
 result.
 Two disadvantages of using libraries, however, are that this assignment
 hasn't allowed me to learn the foundations of WebGL and that even if I
 need only for a few functionalities, I have to import the entire library.
\end_layout

\begin_layout Standard
The proposed solution, therefore, consists in using three.js, whose code
 is released under the MIT license and is used by thousands of developers,
 as shown on its GitHub page
\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/mrdoob/three.js/
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Primitives
\end_layout

\begin_layout Standard
Three.js certainly makes use of graphics primitives, and in particular it
 is based on triangles.
 However, this level of detail is hidden, therefore a programmer can create
 tridimensional objects directly, without having to define them using simpler
 objects.
\end_layout

\begin_layout Standard
I have also used, for debug purposes, the line primitive, that allows to
 model rays appropriately.
\end_layout

\begin_layout Standard
As for the other shapes, I have modeled buildings by using a box geometry,
 since they have the shape of a parallelepiped.
 On some buildings (the ones that represent the old buildings), there is
 also a roof, that has been modeled by using a cone geometry.
 In fact it appears as a pyramid.
\end_layout

\begin_layout Standard
Moreover, I have used planes to define the ground and the park (I have only
 two planes, but another possible implementation may have been to have several
 small planes and to assign to each plane a texture).
 
\end_layout

\begin_layout Standard
Finally, I have modeled a semi-transparent sculpture by using a torus knot
 geometry.
\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
